<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head> <title>CURLOPT_HEADERFUNCTION</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
<link rel="stylesheet" type="text/css" href="/curl.css">
<link rel="shortcut icon" href="/favicon.ico">
<link rel="icon" href="/logo/curl-symbol.svg" type="image/svg+xml">
<link rel="STYLESHEET" type="text/css" href="https://curl.se/manpage.css">
</head>
<body>
<div class="main">
<div class="menu">
<a href="/libcurl/c/libcurl.html" class="menuitem" title="Overview">API Overview</a>
<div class="dropdown">
  <a class="dropbtn" href="/libcurl/c/">Docs</a>
  <div class="dropdown-content">
    <a href="/libcurl/c/libcurl-easy.html">Easy interface</a>
    <a href="/libcurl/c/libcurl-env.html">Environment</a>
    <a href="/libcurl/c/libcurl-errors.html">Errors</a>
    <a href="/libcurl/c/example.html">Examples</a>
    <a href="/libcurl/c/libcurl-multi.html">Multi interface</a>
    <a href="/libcurl/c/libcurl-share.html">Share interface</a>
    <a href="/libcurl/c/libcurl-url.html">URL parsing interface</a>
    <a href="/libcurl/c/symbols-in-versions.html">Symbols</a>
    <a href="/libcurl/c/libcurl-tutorial.html">Tutorial</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/libcurl/c/">Functions</a>
  <div class="dropdown-content">
    <a href="/libcurl/c/allfuncs.html">All functions</a>
    <a href="/libcurl/c/curl_easy_getinfo.html">curl_easy_getinfo</a>
    <a href="/libcurl/c/curl_easy_init.html">curl_easy_init</a>
    <a href="/libcurl/c/curl_easy_perform.html">curl_easy_perform</a>
    <a href="/libcurl/c/curl_easy_reset.html">curl_easy_reset</a>
    <a href="/libcurl/c/curl_easy_setopt.html">curl_easy_setopt</a>
    <a href="/libcurl/c/curl_multi_add_handle.html">curl_multi_add_handle</a>
    <a href="/libcurl/c/curl_multi_init.html">curl_multi_init</a>
    <a href="/libcurl/c/curl_multi_perform.html">curl_multi_perform</a>
    <a href="/libcurl/c/curl_multi_remove_handle.html">curl_multi_remove_handle</a>
    <a href="/libcurl/c/curl_multi_setopt.html">curl_multi_setopt</a>
  </div>
</div>
</div>
<div class="contents">
<div class="where"><a href="/">curl</a> / <a href="/libcurl/">libcurl</a> / <a href="/libcurl/c/">API</a> / <a href="/libcurl/c/curl_easy_setopt.html">curl_easy_setopt</a> / <b>CURLOPT_HEADERFUNCTION</b></div>
<h1> CURLOPT_HEADERFUNCTION explained </h1>
<div class="relatedbox">
<b>Related:</b>
<br><a href="easy_setopt_options.html">easy options</a>
<br><a href="easy_getinfo_options.html">getinfo options</a>
<br><a href="multi_setopt_options.html">multi options</a>
<br><a href="./">API overview</a>
<br><a href="https://github.com/curl/curl/issues/new?title=CURLOPT_HEADERFUNCTION%20man%20page:&amp;labels=documentation" target="_new">File a bug about this page</a>
<br><a href="https://github.com/curl/curl/blob/master/docs/libcurl/opts/CURLOPT_HEADERFUNCTION.3" target="_new">View man page source</a>
</div>
<!-- generated with roffit -->
<p class="level0"><a name="NAME"></a><h2 class="nroffsh">Name</h2>
<p class="level0">CURLOPT_HEADERFUNCTION - callback that receives header data <a name="SYNOPSIS"></a><h2 class="nroffsh">Synopsis</h2>
<p class="level0"><pre class="level0">
&#35;include &lt;curl/curl.h&gt;
&nbsp;
size_t header_callback(char &#x2a;buffer,
&nbsp;                      size_t size,
&nbsp;                      size_t nitems,
&nbsp;                      void &#x2a;userdata);
&nbsp;
CURLcode curl_easy_setopt(CURL &#x2a;handle, CURLOPT_HEADERFUNCTION,
&nbsp;                         header_callback);
</pre>
<p class="level0"><a name="DESCRIPTION"></a><h2 class="nroffsh">Description</h2>
<p class="level0">Pass a pointer to your callback function, which should match the prototype shown above.
<p class="level0">This function gets called by libcurl as soon as it has received header data. The header callback will be called once for each header and only complete header lines are passed on to the callback. Parsing headers is easy to do using this callback. <span Class="emphasis">buffer</span> points to the delivered data, and the size of that data is <span Class="emphasis">nitems</span>; <span Class="emphasis">size</span> is always 1. Do not assume that the header line is null-terminated!
<p class="level0">The pointer named <span Class="emphasis">userdata</span> is the one you set with the <a Class="emphasis" href="./CURLOPT_HEADERDATA.html">CURLOPT_HEADERDATA</a> option.
<p class="level0">This callback function must return the number of bytes actually taken care of. If that amount differs from the amount passed in to your function, it will signal an error to the library. This will cause the transfer to get aborted and the libcurl function in progress will return <span Class="emphasis"><a href="libcurl-errors.html#CURLEWRITEERROR">CURLE_WRITE_ERROR</a></span>.
<p class="level0">A complete HTTP header that is passed to this function can be up to <span Class="emphasis">CURL_MAX_HTTP_HEADER</span> (100K) bytes and includes the final line terminator.
<p class="level0">If this option is not set, or if it is set to NULL, but <a Class="emphasis" href="./CURLOPT_HEADERDATA.html">CURLOPT_HEADERDATA</a> is set to anything but NULL, the function used to accept response data will be used instead. That is, it will be the function specified with <a Class="emphasis" href="./CURLOPT_WRITEFUNCTION.html">CURLOPT_WRITEFUNCTION</a>, or if it is not specified or NULL - the default, stream-writing function.
<p class="level0">It&#39;s important to note that the callback will be invoked for the headers of all responses received after initiating a request and not just the final response. This includes all responses which occur during authentication negotiation. If you need to operate on only the headers from the final response, you will need to collect headers in the callback yourself and use HTTP status lines, for example, to delimit response boundaries.
<p class="level0">For an HTTP transfer, the status line and the blank line preceding the response body are both included as headers and passed to this function.
<p class="level0">When a server sends a chunked encoded transfer, it may contain a trailer. That trailer is identical to an HTTP header and if such a trailer is received it is passed to the application using this callback as well. There are several ways to detect it being a trailer and not an ordinary header: 1) it comes after the response-body. 2) it comes after the final header line (CR LF) 3) a Trailer: header among the regular response-headers mention what header(s) to expect in the trailer.
<p class="level0">For non-HTTP protocols like FTP, POP3, IMAP and SMTP this function will get called with the server responses to the commands that libcurl sends. <a name="LIMITATIONS"></a><h2 class="nroffsh">Limitations</h2>
<p class="level0">libcurl does not unfold HTTP &quot;folded headers&quot; (deprecated since <a href="http://www.ietf.org/rfc/rfc7230.txt">RFC 7230</a>). A folded header is a header that continues on a subsequent line and starts with a whitespace. Such folds will be passed to the header callback as a separate one, although strictly it is just a continuation of the previous line. <a name="DEFAULT"></a><h2 class="nroffsh">Default</h2>
<p class="level0">Nothing. <a name="PROTOCOLS"></a><h2 class="nroffsh">Protocols</h2>
<p class="level0">Used for all protocols with headers or meta-data concept: HTTP, FTP, POP3, IMAP, SMTP and more. <a name="EXAMPLE"></a><h2 class="nroffsh">Example</h2>
<p class="level0"><pre class="level0">
static size_t header_callback(char &#x2a;buffer, size_t size,
&nbsp;                             size_t nitems, void &#x2a;userdata)
{
&nbsp; /&#x2a; received header is nitems &#x2a; size long in &#39;buffer&#39; NOT ZERO TERMINATED &#x2a;/
&nbsp; /&#x2a; &#39;userdata&#39; is set with CURLOPT_HEADERDATA &#x2a;/
&nbsp; return nitems &#x2a; size;
}
&nbsp;
CURL &#x2a;curl = curl_easy_init();
if(curl) {
&nbsp; curl_easy_setopt(curl, CURLOPT_URL, &quot;https://example.com&quot;);
&nbsp;
&nbsp; curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, header_callback);
&nbsp;
&nbsp; curl_easy_perform(curl);
}
</pre>
<p class="level0"><a name="AVAILABILITY"></a><h2 class="nroffsh">Availability</h2>
<p class="level0">Always <a name="RETURN"></a><h2 class="nroffsh">Return value</h2>
<p class="level0">Returns <a href="libcurl-errors.html#CURLEOK">CURLE_OK</a> <a name="SEE"></a><h2 class="nroffsh">See also</h2>
<p class="level0"><a Class="bold" href="./curl_easy_header.html">curl_easy_header</a>(3),  <a Class="bold" href="./CURLOPT_HEADERDATA.html">CURLOPT_HEADERDATA</a>(3), <a Class="bold" href="./CURLOPT_WRITEFUNCTION.html">CURLOPT_WRITEFUNCTION</a>(3),  <p class="roffit">
 This HTML page was made with <a href="http://daniel.haxx.se/projects/roffit/">roffit</a>.
</div>
</div>
<script defer src="https://www.fastly-insights.com/insights.js?k=8cb1247c-87c2-4af9-9229-768b1990f90b" type="text/javascript"></script>
</body>
</html>
